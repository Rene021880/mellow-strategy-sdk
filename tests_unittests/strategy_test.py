"""
    End-to-end test of primitive strategies.
    H_strategy - TODO bug fails
    M_strategy - YES
"""

import sys

sys.path.append('..')

import numpy as np
import pandas as pd
from pandas import Timestamp
import polars as pl
import unittest
from datetime import datetime

from strategy.data import PoolDataUniV3
from strategy.primitives import Pool, Token, Fee
from strategy.strategies import MStrategy
from strategy.backtest import Backtest
from strategy.strategies import HStrategy


class TestStrategies(unittest.TestCase):
    """
        test BiCurrencyPosition
    """

    def setUp(self):
        self.data_dict = {
            'timestamp': {
                0: Timestamp('2022-01-01 00:00:00'),
                1: Timestamp('2022-01-02 00:00:00'),
                2: Timestamp('2022-01-03 00:00:00'),
                3: Timestamp('2022-01-04 00:00:00'),
                4: Timestamp('2022-01-05 00:00:00'),
                5: Timestamp('2022-01-06 00:00:00'),
                6: Timestamp('2022-01-07 00:00:00'),
                7: Timestamp('2022-01-08 00:00:00'),
                8: Timestamp('2022-01-09 00:00:00'),
                9: Timestamp('2022-01-10 00:00:00'),
                10: Timestamp('2022-01-11 00:00:00'),
                11: Timestamp('2022-01-12 00:00:00'),
                12: Timestamp('2022-01-13 00:00:00'),
                13: Timestamp('2022-01-14 00:00:00'),
                14: Timestamp('2022-01-15 00:00:00')},
            'price': {
                0: 10.0,
                1: 15.716350828063042,
                2: 25.53100949777849,
                3: 34.2786346724524,
                4: 61.538792452889496,
                5: 86.03383059833544,
                6: 145.7683807919327,
                7: 289.25480846384175,
                8: 495.09454104064537,
                9: 844.3937734725213,
                10: 1491.096607829533,
                11: 2668.981794974499,
                12: 3888.036901369077,
                13: 5601.599762101116,
                14: 11181.559197735189},
            'price_before': {
                0: 10.0,
                1: 10.0,
                2: 15.716350828063042,
                3: 25.53100949777849,
                4: 34.2786346724524,
                5: 61.538792452889496,
                6: 86.03383059833544,
                7: 145.7683807919327,
                8: 289.25480846384175,
                9: 495.09454104064537,
                10: 844.3937734725213,
                11: 1491.096607829533,
                12: 2668.981794974499,
                13: 3888.036901369077,
                14: 5601.599762101116},
            'price_next': {
                0: 15.716350828063042,
                1: 25.53100949777849,
                2: 34.2786346724524,
                3: 61.538792452889496,
                4: 86.03383059833544,
                5: 145.7683807919327,
                6: 289.25480846384175,
                7: 495.09454104064537,
                8: 844.3937734725213,
                9: 1491.096607829533,
                10: 2668.981794974499,
                11: 3888.036901369077,
                12: 5601.599762101116,
                13: 11181.559197735189,
                14: 11181.559197735189}
        }
        self.pool = Pool(Token.WBTC, Token.WETH, Fee.MIDDLE)

        swaps_df = pl.from_pandas(pd.DataFrame(self.data_dict))

        self.data = PoolDataUniV3(self.pool, mints=None, burns=None, swaps=swaps_df)

    def test_m_strategy(self):

        ans = {
            'timestamp': {
                0: Timestamp('2022-01-01 00:00:00'), 1: Timestamp('2022-01-02 00:00:00'),
                2: Timestamp('2022-01-03 00:00:00'), 3: Timestamp('2022-01-04 00:00:00'),
                4: Timestamp('2022-01-05 00:00:00'), 5: Timestamp('2022-01-06 00:00:00'),
                6: Timestamp('2022-01-07 00:00:00'), 7: Timestamp('2022-01-08 00:00:00'),
                8: Timestamp('2022-01-09 00:00:00'), 9: Timestamp('2022-01-10 00:00:00'),
                10: Timestamp('2022-01-11 00:00:00'), 11: Timestamp('2022-01-12 00:00:00'),
                12: Timestamp('2022-01-13 00:00:00'), 13: Timestamp('2022-01-14 00:00:00'),
                14: Timestamp('2022-01-15 00:00:00')},
            'price': {
                0: 10.0, 1: 15.716350828063042, 2: 25.53100949777849, 3: 34.2786346724524, 4: 61.538792452889496,
                5: 86.03383059833544, 6: 145.7683807919327, 7: 289.25480846384175, 8: 495.09454104064537,
                9: 844.3937734725213, 10: 1491.096607829533, 11: 2668.981794974499, 12: 3888.036901369077,
                13: 5601.599762101116, 14: 11181.559197735189},
            'total_value_x': {
                0: 0.1, 1: 0.1621615013248303, 2: 0.15994614081124592, 3: 0.15792128482442847,
                4: 0.15297266474926838, 5: 0.14876815817718245, 6: 0.14091882812449294,
                7: 0.12773314164812327,
                8: 0.11342274446217065, 9: 0.09613684210039948, 10: 0.07492313133583581,
                11: 0.05113545140783653,
                12: 0.03492340630813451, 13: 0.020470305111856504, 14: 0.0},
            'total_value_y': {
                0: 1.0, 1: 0.020108362266661794, 2: 0.07650321924379984, 3: 0.14570983277467534,
                4: 0.4493381750371009, 5: 0.809996362471037, 6: 1.9507703727896066, 7: 5.753394109262286,
                8: 12.817207441225472, 9: 27.36963574273585, 10: 58.90660311567897,
                11: 122.20527940934304, 12: 185.04953034021315, 13: 265.7675171878332, 14: 493.971269777322},
            'total_il_x': {
                0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0,
                11: 0.0,
                12: 0.0, 13: 0.0, 14: 0.0},
            'total_il_y': {
                0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0,
                11: 0.0,
                12: 0.0, 13: 0.0, 14: 0.0},
            'total_fees_x': {
                0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0,
                11: 0.0,
                12: 0.0, 13: 0.0, 14: 0.0},
            'total_fees_y': {
                0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0,
                11: 0.0,
                12: 0.0, 13: 0.0, 14: 0.0},
            'total_value_to_x': {
                0: 0.2, 1: 0.16344095623689273, 2: 0.16294262315756508, 3: 0.1621720326785072,
                4: 0.16027437082972304, 5: 0.15818301692330353, 6: 0.15430149974498725,
                7: 0.14762354257116095,
                8: 0.13931114835021358, 9: 0.128550197814973, 10: 0.11442868906185363,
                11: 0.09692267994549339,
                12: 0.08251799839522414, 13: 0.06791523664479879, 14: 0.04417731561778748},
            'total_value_to_y': {
                0: 2.0, 1: 2.568695407893104, 2: 4.160089659428735, 3: 5.559035862275559,
                4: 9.863091242007773,
                5: 13.609090881513122, 6: 22.49227977159361, 7: 42.70081953117495,
                8: 68.97218905429426,
                9: 108.54698661362411, 10: 170.62423009851034, 11: 258.68486829466184,
                12: 320.83302278774573,
                13: 380.4339734325459, 14: 493.971269777322},
            'total_fees_to_x': {
                0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0,
                11: 0.0,
                12: 0.0, 13: 0.0, 14: 0.0},
            'total_fees_to_y': {
                0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0,
                11: 0.0,
                12: 0.0, 13: 0.0, 14: 0.0},
            'total_il_to_x': {
                0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0,
                11: 0.0,
                12: 0.0, 13: 0.0, 14: 0.0},
            'total_il_to_y': {
                0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0,
                11: 0.0,
                12: 0.0, 13: 0.0, 14: 0.0},
            'hold_to_x': {
                0: 0.2, 1: 0.16362800187778992, 2: 0.13916805561828693, 3: 0.12917269049819063,
                4: 0.11624991261837875,
                5: 0.11162333460041646, 6: 0.10686019831301675, 7: 0.10345715946888055, 8: 0.1020198162514539,
                9: 0.10118428158924901, 10: 0.100670647357622, 11: 0.10037467471748325, 12: 0.100257199204989,
                13: 0.1001785204303181, 14: 0.1000894329656818},
            'hold_to_y': {
                0: 2.0, 1: 2.5716350828063046, 2: 3.5531009497778494, 3: 4.42786346724524,
                4: 7.15387924528895,
                5: 9.603383059833545, 6: 15.576838079193273, 7: 29.925480846384175, 8: 50.50945410406454,
                9: 85.43937734725213, 10: 150.1096607829533, 11: 267.8981794974499, 12: 389.80369013690773,
                13: 561.1599762101116, 14: 1119.155919773519},
            'vpn_value': {
                0: 0.1000894329656818, 1: 0.1621632996753028, 2: 0.1599529827210271, 3: 0.1579343160869025,
                4: 0.153012850394856, 5: 0.1488405985540697, 6: 0.14109329130429568, 7: 0.12824768474605075,
                8: 0.11456902533539821, 9: 0.09858458979450278, 10: 0.08019132355071139, 11: 0.06206463196738636,
                12: 0.051472934604482906, 13: 0.04423868235585161, 14: 0.04417731561778748},
            'vpn_hold': {
                0: 0.1000894329656818, 1: 0.1000894329656818, 2: 0.1000894329656818,
                3: 0.1000894329656818, 4: 0.1000894329656818, 5: 0.1000894329656818,
                6: 0.1000894329656818, 7: 0.1000894329656818, 8: 0.1000894329656818,
                9: 0.1000894329656818, 10: 0.1000894329656818, 11: 0.1000894329656818,
                12: 0.1000894329656818, 13: 0.1000894329656818, 14: 0.1000894329656818
            },
            'portfolio_apy_x': {
                0: 0.0, 1: -99.99999999999999, 2: -99.99999999851325, 3: -99.99999950873111,
                4: -99.99999045253209,
                5: -99.99993648157309, 6: -99.999866465459, 7: -99.9999037874449, 8: -99.99995724486084,
                9: -99.99999014718095, 10: -99.99999910138726, 11: -99.99999997303644,
                12: -99.99999999839694,
                13: -99.999999999941, 14: -99.99999999999999},
            'portfolio_apy_y': {
                0: 0.0, 1: 4.668248699702839e+41, 2: 1.1175497248247037e+60, 3: 1.0382136734913862e+56,
                4: 1.716737031615445e+65, 5: 6.227814391967749e+62, 6: 8.630681830342553e+65,
                7: 2.0846748759452397e+71, 8: 1.4289207779246878e+72, 9: 2.2241849976818595e+72,
                10: 3.0331289986808674e+72, 11: 1.1787098142313301e+72, 12: 1.1921359944693791e+69,
                13: 9.869773858402089e+65, 14: 2.400872972558109e+64},
            'hold_apy_x': {
                0: 0.0, 1: -99.99999999999999, 2: -100.0, 3: -100.0, 4: -100.0, 5: -99.99999999999996,
                6: -99.99999999999936, 7: -99.9999999999913, 8: -99.99999999986076, 9: -99.99999999841863,
                10: -99.99999998718852, 11: -99.99999992182423, 12: -99.99999962040046,
                13: -99.99999851436117, 14: -99.99999516514254},
            'hold_apy_y': {
                0: 0.0, 1: 7.086982578139083e+41, 2: 3.531043508579297e+47,
                3: 9.885092718977997e+43, 4: 3.220582033291227e+52, 5: 5.517987828719156e+51,
                6: 1.6975907955517363e+56, 7: 1.855402367897802e+63, 8: 9.591460315731185e+65,
                9: 1.3521586479315855e+68, 10: 2.8269664051653884e+70, 11: 3.7646848168658316e+72,
                12: 4.452136724020609e+71, 13: 5.4187540892312814e+70, 14: 4.37171027589236e+73},
            'vpn_apy': {
                0: 0.0, 1: 29083075.39967282, 2: 20335178.217194397,
                3: 14602975.097552009, 4: 6397229.375491074, 5: 3111416.915989879,
                6: 772087.5948321373, 7: 64003.835452329906, 8: 3287.233112583812,
                9: -32.629311853944685, 10: -99.69072686648487, 11: -99.99961182257877,
                12: -99.99999704655443, 13: -99.99999994305767, 14: -99.99999994508161},
            'vpn_hold_apy': {
                0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0,
                4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0,
                8: 0.0, 9: 0.0, 10: 0.0, 11: 0.0,
                12: 0.0, 13: 0.0, 14: 0.0},
        }

        m_strat = MStrategy(
            600, self.data.swaps['price'].min(), self.data.swaps['price'].max(), self.pool, 0.01, 1e-6, 1e-6
        )

        portfolio_history, _, _ = Backtest(m_strat).backtest(self.data.swaps)
        res = portfolio_history.calculate_stats().to_pandas()

        pd.testing.assert_frame_equal(pd.DataFrame(ans), res)

    # def test_h_strategy(self):
    #     ans = {}
    #
    #     h_strat = HStrategy(
    #         900, 10, 1200, self.data.swaps['price'].min() - 2, self.data.swaps['price'].max() + 2,
    #         60, 15, self.pool, 0.01, 1e-5, 1e-5
    #     )
    #
    #     portfolio_history, _, _ = Backtest(h_strat).backtest(self.data.swaps)
    #     res = portfolio_history.calculate_stats().to_pandas()
    #
    #     sys.stdout.write(str(res.to_dict()))
    #     pd.testing.assert_frame_equal(pd.DataFrame(ans), res)


if __name__ == "__main__":
    unittest.main()
